<?phpClass WPChare {    public $charewidget_channelId;    public $charewidget_channelSecret;    private $wpdb;    private $charewidget_table_name;    public function __construct() {        global $wpdb;        $this->wpdb = $wpdb;        $this->charewidget_table_name = $this->wpdb->prefix . 'chare_channel';        add_action('admin_init', array($this, 'chare_css_and_js'));        add_action('admin_menu', array($this, 'chare_plugin_create_menu'));        add_action('wp_enqueue_scripts', array($this, 'register_chare_plugin_settings'));        add_action('wp_enqueue_scripts', array($this, 'wptuts_scripts_important'));        add_action('wp_enqueue_scripts', array($this, 'wptuts_styles_with_the_lot'));        add_shortcode('charewidget', array($this, 'charewidgetload'));    }    public function chare_css_and_js() {        wp_register_style('chare_css', plugins_url('css/chare.css', __FILE__));        wp_enqueue_style('chare_css');    }    public function wptuts_scripts_important() {// Register the script like this for a plugin:        wp_enqueue_script('chare-carousal', plugins_url('js/owl.carouselChare.js', __FILE__), array(), '20120208', 'all');        wp_enqueue_script('chare-fancybox', plugins_url('js/jquery.fancybox.min.js', __FILE__), array(), '20120208', 'all');        wp_enqueue_script('chare-custom', plugins_url('js/custom-chare.js', __FILE__), array('jquery'), 'v2.1.1', 'all');        wp_enqueue_style('chare-carousal');        wp_enqueue_style('chare-fancybox');        wp_enqueue_style('chare-custom');//wp_enqueue_script( 'chare-widget', 'https://web.chare.one/widget/widget.js' );    }    public function wptuts_styles_with_the_lot() {// Register the style like this for a plugin:        wp_register_style('chare-carosal-style', plugins_url('css/owl.carousel.min.css', __FILE__), array(), '20120208', 'all');        wp_register_style('chare-fancybox-style', plugins_url('css/jquery.fancybox.min.css', __FILE__), array(), '20120208', 'all');        wp_register_style('chare-style', plugins_url('css/style.css', __FILE__), array(), '20120208', 'all');// For either a plugin or a theme, you can then enqueue the style:        wp_enqueue_style('chare-carosal-style');        wp_enqueue_style('chare-fancybox-style');        wp_enqueue_style('chare-style');    }    public function chare_plugin_create_menu() {//create new top-level menu        add_menu_page('CHARE APP', 'CHARE', 'administrator', __FILE__, 'chare_plugin_settings_page', plugins_url('images/icons.png', __FILE__));//call register settings function    }    public function register_chare_plugin_settings() {//register our settings        register_setting('chare-plugin-settings-group', 'new_option_name');        register_setting('chare-plugin-settings-group', 'some_other_option');        register_setting('chare-plugin-settings-group', 'option_etc');    }    public function charewidget_jal_install() {        if ($this->wpdb->get_var("SHOW TABLES LIKE '$this->charewidget_table_name'") != $this->charewidget_table_name) {            $charset_collate = $this->wpdb->get_charset_collate();            $sql = "CREATE TABLE $this->charewidget_table_name (	  id mediumint(9) NOT NULL AUTO_INCREMENT,	  channelId varchar(80) DEFAULT '' NOT NULL,	  channelSecret varchar(80) DEFAULT '' NOT NULL, 	  PRIMARY KEY  (id)	) $charset_collate;";            require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );            dbDelta($sql);        }    }    public function charewidget_jal_install_data($chare_id, $channel) {        $this->charewidget_channelId = $chare_id;        $this->charewidget_channelSecret = $channel;        if (!empty($this->charewidget_channelId) && !empty($this->charewidget_channelSecret)) {            $myrows = $this->wpdb->get_results("DELETE FROM " . $this->charewidget_table_name);            $this->wpdb->insert(                $this->charewidget_table_name, array(                    'channelId' => $this->charewidget_channelId,                    'channelSecret' => $this->charewidget_channelSecret,                )            );        }    }    public function charewidget_jal_get_data() {        session_start();        $this->charewidget_table_name = $this->wpdb->prefix . 'chare_channel';        $chare_myrows = $this->wpdb->get_results("SELECT channelId, channelSecret FROM " . $this->charewidget_table_name . " LIMIT 1");        foreach ($chare_myrows as $chare_result) {            $_SESSION['chare_channelId'] = $chare_result->channelId;            $_SESSION['chare_channelSecret'] = $chare_result->channelSecret;        }    }    public function charewidgetload() {        $myrows = $this->wpdb->get_results("SELECT channelId, channelSecret FROM " . $this->charewidget_table_name . " LIMIT 1");        foreach ($myrows as $result) {            $this->charewidget_channelId = $result->channelId;            $this->charewidget_channelSecret = $result->channelSecret;        }//production        $api_request = 'http://gochare.com/api/WPMessagesAPI/GetWPMessageswithChannel?channelId=' . $result->channelId . '&securityCode=' . $result->channelSecret . '&url=' . $_SERVER['HTTP_HOST'];//preprod//$api_request ='http://chare-preprod.azurewebsites.net/api/WPMessagesAPI/GetWPMessageswithChannel?channelId='.$result->channelId.'&securityCode='.$result->channelSecret.'&url='.$_SERVER['HTTP_HOST'];	        $response = wp_remote_get($api_request);        if (is_wp_error($response)) {            echo _e('something went wrong..');        }        if (is_array($response)) {            $charewidget_objJson = json_decode(wp_remote_retrieve_body($response));            if ($charewidget_objJson->Message) {                echo _e($charewidget_objJson->Message);            } else {                $this->charewidget_bindHtml($charewidget_objJson);            }        }    }    public function charewidget_mapLocation($loc) {        $jsonLoc = json_decode($loc);        $ll = $jsonLoc->latitude . ',' . $jsonLoc->longitude;        $jsonLoc->url = 'https://www.google.com/maps?q=' . $ll;        $jsonLoc->text = "<a target = '_blank' href = '" . $jsonLoc->url . "'>" . $jsonLoc->name . ' ' . $jsonLoc->address . "</a>";        $jsonLoc->image = 'https://maps.googleapis.com/maps/api/staticmap?&markers=color:red%7Clabel:A%7C' .            $ll . '&zoom=16&size=100x100&key=AIzaSyAtdM6w2uzGZ-BDbGp3XfDoIOyvYnKdtrY';        return $jsonLoc;    }    public function charewidget_fileIconFromExtension($storageType, $ext) {        if ($storageType == "google_drive") {            if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'png' || $ext == 'svg') {                return "GoogleIcons/g-img.png";            } else if ($ext == 'doc' || $ext == 'docx') {                return 'GoogleIcons/g-doc.png';            } else if ($ext == 'pptx' || $ext == 'ppt') {                return 'GoogleIcons/g-ppt.png';            } else if ($ext == 'pdf') {                return 'GoogleIcons/g-pdf.png';            } else if ($ext == 'xls' || $ext == 'xlsx') {                return 'GoogleIcons/g-xls.png';            } else if ($ext == 'mp3') {                return 'GoogleIcons/g-music.png';            } else if ($ext == 'mp4' || $ext == 'mov') {                return 'GoogleIcons/g-video.png';            } else if ($ext == 'zip' || $ext == 'gzip') {                return 'GoogleIcons/g-zip.png';            } else if ($ext == 'txt') {                return 'GoogleIcons/g-nofile.png';            } else {                return 'GoogleIcons/g-nofile.png';            }        } else {            if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'png' || $ext == 'svg') {                return "GoogleIcons/g-img.png";            } else if ($ext == 'doc' || $ext == 'docx') {                return 'GoogleIcons/g-doc.png';            } else if ($ext == 'pptx' || $ext == 'ppt') {                return 'GoogleIcons/g-ppt.png';            } else if ($ext == 'pdf') {                return 'GoogleIcons/g-pdf.png';            } else if ($ext == 'xls' || $ext == 'xlsx') {                return 'GoogleIcons/g-xls.png';            } else if ($ext == 'mp3') {                return 'GoogleIcons/g-music.png';            } else if ($ext == 'mp4' || $ext == 'mov') {                return 'GoogleIcons/g-video.png';            } else if ($ext == 'zip' || $ext == 'gzip') {                return 'GoogleIcons/g-zip.png';            } else if ($ext == 'txt') {                return 'GoogleIcons/g-nofile.png';            } else {                return 'GoogleIcons/g-nofile.png';            }        }    }    public function charewidget_bindHtml($charewidget_objJson) {        $charewidget_pluginUrl = plugin_dir_url(__FILE__);//preprod        $charewidget_blobUrlmsg = 'https://gochare.blob.core.windows.net/messageimage/';        $charewidget_blobUrluser = 'https://gochare.blob.core.windows.net/userimage/';        $charewidget_serverUrl = 'https://web.chare.one/';        $charewidget_channelImage = 'https://gochare.blob.core.windows.net/channelslogo/';        $charewidget_follow = "Follow";        if (get_locale() == "de_DE") {            $charewidget_follow = "Folgen";        }        $charewidget_bodyhtml = '';        /* $charewidget_bodyhtml = $charewidget_bodyhtml . '<link href="'.$charewidget_pluginUrl."css/owl.carousel.min.css" .'" rel="stylesheet" type="text/css">          <link href="'.$charewidget_pluginUrl."css/jquery.fancybox.min.css" .'" rel="stylesheet" type="text/css">          <link href="'.$charewidget_pluginUrl."css/style.css?ver=1.5" .'" rel="stylesheet" type="text/css">'; */        $charewidget_bodyhtml .= '<div class="chare-output">';        $charewidget_bodyhtml .= '<div class="chare-ch-name">';        $charewidget_bodyhtml .= '<div class="chare-ch-info">';        if ($charewidget_objJson->image) {            $charewidget_bodyhtml .= '<img src="' . $charewidget_channelImage . $charewidget_objJson->image . '" />' . $charewidget_objJson->name . ' </div>';        } else {            $charewidget_bodyhtml .= '<img src="' . $charewidget_pluginUrl . 'images/channel_blank.png" />' . $charewidget_objJson->name . ' </div>';        }        $charewidget_bodyhtml .= '<a href="' . $charewidget_serverUrl . 'searchchannellink?id=' . $this->charewidget_channelId . '" target="_blank" class="chare-follow-button" data-show-count="false">';        $charewidget_bodyhtml .= '<img src="' . $charewidget_pluginUrl . "images/chare_off.png" . '"> ' . $charewidget_follow . ' @' . $charewidget_objJson->name . '</a></div>';        $charewidget_bodyhtml .= '<div class="owl-carousel owl-theme">';// item div start		          foreach ($charewidget_objJson->messageslist as $msg) {            $charewidget_bodyhtml .= '<div class="item">';            $charewidget_bodyhtml .= '<div class="img-class">';            if ($msg->image) {                $charewidget_bodyhtml .= '<img src="' . $charewidget_blobUrlmsg . $msg->image . '" data-fancybox="" data-src="#' . $msg->messageId . '"/>';            } else {                $charewidget_bodyhtml .= '<img src="' . $charewidget_pluginUrl . "images/no-image.png" . '" data-fancybox="" data-src="#' . $msg->messageId . '"/>';            }            if ($msg->location) {                $loc = $this->charewidget_mapLocation((string) $msg->location);                $charewidget_bodyhtml .= '<a target = "_blank" href="' . $loc->url . '" class="location"> <img src="' . $loc->image . '"> </a>';            }            $charewidget_bodyhtml .= '</div>';            $charewidget_bodyhtml .= ' <div class="userinfo">';            $charewidget_bodyhtml .= '<div class="infoc">';            if ($msg->creatorImage) {                $charewidget_bodyhtml .= '<img src="' . $charewidget_blobUrluser . $msg->creatorImage . '" />';            } else {                $charewidget_bodyhtml = $charewidget_bodyhtml . '<img src="' . $charewidget_pluginUrl . "images/no-profile-image.png" . '" />';            }            $charewidget_bodyhtml .= '<div class="leftinf">';            $charewidget_bodyhtml .= '<span class="namec">' . $msg->creatorName . '</span> <span class="desigc">' . $msg->jobTitle . '</span></div>';            $charewidget_bodyhtml .= '</div></div>';            $charewidget_bodyhtml .= '<div class="msg-body">';            $charewidget_bodyhtml .= '<h4 data-fancybox="" data-src="#' . $msg->messageId . '">' . $msg->subject . '</h4>';            $charewidget_bodyhtml .= '<p data-fancybox="" data-src="#' . $msg->messageId . '">' . nl2br($msg->body) . '</p>';            $charewidget_bodyhtml .= '</div>';            $charewidget_bodyhtml .= '<span class="timestamp chare-dateclass"> ' . $msg->createdTime . ' </span></div>';        }// item div end        $charewidget_bodyhtml .= '</div></div>';// popup div start        foreach ($charewidget_objJson->messageslist as $msg) {            $charewidget_bodyhtml .= '<div id="' . $msg->messageId . '" class="chare-output cdetail-popup">';            $charewidget_bodyhtml .= '<div class="popimage" >';            if ($msg->image) {                $charewidget_bodyhtml .= '<img src="' . $charewidget_blobUrlmsg . $msg->image . '" > ';            } else {                $charewidget_bodyhtml .= '<img src="' . $charewidget_pluginUrl . "images/no-image.png" . '" width="512" height="384"> ';            }            $charewidget_bodyhtml .= '</div>';            $charewidget_bodyhtml .= '<div class="userinfo">';            $charewidget_bodyhtml .= '<div class="infoc">';            if ($msg->creatorImage) {                $charewidget_bodyhtml .= '<img src="' . $charewidget_blobUrluser . $msg->creatorImage . '" />';            } else {                $charewidget_bodyhtml .= '<img src="' . $charewidget_pluginUrl . "images/no-profile-image.png" . '" />';            }            $charewidget_bodyhtml .= '<div class="leftinf"><span class="namec">' . $msg->creatorName . '</span>';            $charewidget_bodyhtml .= '<span class="desigc">' . $msg->jobTitle . '</span> </div> </div></div>';            $charewidget_bodyhtml .= '<div class="clearfix">';            if ($msg->lstFiles) {                $charewidget_bodyhtml .= '<ul class="attach-views">';                foreach ($msg->lstFiles as $afile) {                    $charewidget_bodyhtml .= ' <li>  <a target="_blank" href="' . $afile->url . '">';                    $charewidget_bodyhtml .= '<img src="' . $charewidget_pluginUrl . "images/" . $this->charewidget_fileIconFromExtension($afile->storageType, $afile->extension) . '">';                    $charewidget_bodyhtml .= '<span>' . $afile->fileName . '</span> </a> </li>';                }                $charewidget_bodyhtml .= '</ul>';            }            if ($msg->location) {                $loc = $this->charewidget_mapLocation((string) $msg->location);                $charewidget_bodyhtml .= '<a target = "_blank" href="' . $loc->url . '" class="location"> <img src="' . $loc->image . '"> </a>';            }            $charewidget_bodyhtml .= '</div>';            $charewidget_bodyhtml .= '<div class="clearfix">';            $charewidget_bodyhtml .= '<h4>' . $msg->subject . '</h4>';            $charewidget_bodyhtml .= '<span class="timestamp chare-dateclass"> ' . $msg->createdTime . ' </span></div>';            $charewidget_bodyhtml .= '<div class="chare-ch-content clearfix">';            $charewidget_bodyhtml .= '<p>' . nl2br($msg->body) . '</p>';            $charewidget_bodyhtml .= '</div></div>';        }//popup div end        echo _e($charewidget_bodyhtml);    }}